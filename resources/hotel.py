from flask_restful import Resource, reqparsefrom models.hotel import HotelModelhoteis = [    {        'hotel_id': 'alpha',        'nome': 'Alpha Hotel',        'estrelas': 4.3,        'diaria': 420.34,        'cidade': 'Rio de Janeiro'    },    {        'hotel_id': 'bravo',        'nome': 'Bravo Hotel',        'estrelas': 4.8,        'diaria': 540.00,        'cidade': 'SÃ£o Pualo'    },    {        'hotel_id': 'coco',        'nome': 'Coco Hotel',        'estrelas': 3.4,        'diaria': 330.54,        'cidade': 'Belo Horizonte'    }]class Hoteis(Resource):    @staticmethod    def get():        return {'hoteis': hoteis}class Hotel(Resource):    argumentos = reqparse.RequestParser()    argumentos.add_argument('nome')    argumentos.add_argument('estrelas')    argumentos.add_argument('diaria')    argumentos.add_argument('cidade')    @staticmethod    def get(hotel_id):        hotel = Hotel.find_hotel(hotel_id)        if hotel:            return hotel        return {'message': 'Hotel not found.'}, 404 # not found    def post(self, hotel_id):        if HotelModel.find_hotel(hotel_id):            return {'message': 'Hotel ID "{}" already exists.'.format(hotel_id)}, 400 #Bad request        dados = Hotel.argumentos.parse_args()        hotel_objeto = HotelModel(hotel_id, **dados)        HotelModel.save_hotel(hotel_objeto)    @staticmethod    def put(hotel_id):        dados = Hotel.argumentos.parse_args()        hotel_objeto = HotelModel(hotel_id, **dados)        novo_hotel = hotel_objeto.json()        hotel = Hotel.find_hotel(hotel_id)        if hotel:            hotel.update(novo_hotel)            return novo_hotel, 200        hoteis.append(novo_hotel)        return novo_hotel, 201    @staticmethod    def delete(hotel_id):        global hoteis        hoteis = [hotel for hotel in hoteis if hotel['hotel_id'] != hotel_id]        return {'message': 'Hotel deleted.'}, 201